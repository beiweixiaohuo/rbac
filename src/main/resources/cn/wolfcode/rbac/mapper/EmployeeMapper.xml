<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wolfcode.rbac.mapper.EmployeeMapper">

    <!--
        默认对象映射方式是resultType，这种方式不会封装数据库字段与实体对象字段名字不一致的数据，此时需要自定义映射
        自定义映射结果集
    -->
    <resultMap id="BaseResutlMap" type="cn.wolfcode.rbac.domain.Employee">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="age" column="age"/>
        <result property="admin" column="admin"/>
        <result property="deptId" column="dept_id"/>

        <!--
            关联(维护)部门对象, 员工-部门关系: 多对一. 在多方中维护一方对象
        -->
        <association property="department" javaType="cn.wolfcode.rbac.domain.Department" columnPrefix="d_">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
            <result property="sn" column="sn"/>
        </association>


    </resultMap>

    <!--
        useGeneratedKeys：对于支持自动生成记录主键的数据库，如：MySQL，SQL Server，此时设置useGeneratedKeys参数值为true，
        在执行添加记录之后可以获取到数据库自动生成的主键ID；
        keyProperty：配合useGeneratedKeys=“true”来使用，将自动成的逐渐封装到JavaBean的id中
    -->
    <insert id="insert" keyProperty="id" parameterType="Employee" useGeneratedKeys="true">
        INSERT INTO employee(name,password,email,age,admin,dept_id) values (#{name},#{password},#{email},#{age},#{admin},#{department.id})
    </insert>

    <!--根据id更新数据-->
    <update id="update" parameterType="Employee">
        UPDATE employee SET name=#{name}, password=#{password}, email=#{email},
               age=#{age}, admin=#{admin}, dept_id=#{department.id} WHERE id=#{id}
    </update>

    <!--删除部门后更新在部门的员工的dept_id-->
    <update id="updateDeptId">
        update employee set dept_id = null where dept_id = #{id};
    </update>

    <!--根据id删除数据-->
    <delete id="delete">
        DELETE FROM employee WHERE id=#{id}
    </delete>

<!--    <select id="selectAll" resultMap="BaseResutlMap">
        SELECT * FROM employee
    </select>-->

    <select id="selectAll" resultMap="BaseResutlMap">
        SELECT
          e.id, e.name, e.password, e.email, e.age, e.admin, e.dept_id,
          d.id d_id, d.name d_name, d.sn d_sn
        FROM employee e
        LEFT JOIN department d ON e.dept_id=d.id
    </select>

    <!--根据id查询数据-->
    <select id="selectById" resultMap="BaseResutlMap">
        SELECT * FROM employee WHERE id=#{id}
    </select>

    <!--根据字段查询数据-->
    <select id="findByWord" resultMap="BaseResutlMap" parameterType="Employee" >

    SELECT
      e.id, e.name, e.password, e.email, e.age, e.admin, e.dept_id,
      d.id d_id, d.name d_name, d.sn d_sn
    FROM employee e
    LEFT JOIN department d ON e.dept_id=d.id
    WHERE (e.name LIKE '%' #{name} '%'
    and e.dept_id = #{deptId} )
    OR (e.email like '%' #{name} '%'
    and e.dept_id = #{deptId} )
</select>

    <!--根据字段查询数据-->
    <select id="onlyFindByWord" resultMap="BaseResutlMap" parameterType="Employee" >
    SELECT
    e.id, e.name, e.password, e.email, e.age, e.admin, e.dept_id,
    d.id d_id, d.name d_name, d.sn d_sn
    FROM employee e
    LEFT JOIN department d ON e.dept_id=d.id
    WHERE e.name LIKE '%' #{name} '%'
    OR e.email like '%' #{name} '%'
</select>



</mapper>